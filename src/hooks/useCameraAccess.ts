
import { useRef, useCallback } from 'react';
import { BrowserMultiFormatReader } from '@zxing/library';

interface CameraDevice {
  deviceId: string;
  label: string;
}

export const useCameraAccess = () => {
  const attemptRef = useRef(0);

  const getAvailableCameras = useCallback(async (): Promise<CameraDevice[]> => {
    try {
      console.log("üé• Solicitando permiss√µes de c√¢mera...");
      
      // Solicita permiss√µes de forma mais robusta
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: "environment",
          width: { ideal: 1280, min: 640 },
          height: { ideal: 720, min: 480 }
        } 
      });
      
      // Para o stream tempor√°rio ap√≥s obter permiss√µes
      stream.getTracks().forEach(track => track.stop());
      console.log("‚úÖ Permiss√µes de c√¢mera concedidas");
      
      // Aguarda um pouco para o dispositivo se estabilizar
      await new Promise(resolve => setTimeout(resolve, 100));
      
      console.log("üì± Listando dispositivos de v√≠deo...");
      // Use instance method instead of static method
      const codeReader = new BrowserMultiFormatReader();
      const devices = await codeReader.listVideoInputDevices();
      console.log("üì± C√¢meras encontradas:", devices.map(d => ({ id: d.deviceId, label: d.label })));
      
      if (!devices || devices.length === 0) {
        throw new Error('Nenhuma c√¢mera encontrada no dispositivo.');
      }
      
      return devices.map(device => ({
        deviceId: device.deviceId,
        label: device.label || `C√¢mera ${device.deviceId.substring(0, 8)}`
      }));
    } catch (error) {
      console.error("‚ùå Erro ao acessar c√¢meras:", error);
      
      if (error instanceof Error) {
        if (error.name === 'NotAllowedError') {
          throw new Error("Permiss√£o da c√¢mera negada. Habilite o acesso √† c√¢mera nas configura√ß√µes do navegador.");
        } else if (error.name === 'NotFoundError') {
          throw new Error("Nenhuma c√¢mera encontrada. Verifique se o dispositivo possui c√¢mera.");
        } else if (error.name === 'NotReadableError') {
          throw new Error("C√¢mera em uso por outro aplicativo. Feche outros apps que usam a c√¢mera.");
        }
      }
      
      throw error;
    }
  }, []);

  const selectBestCamera = useCallback((cameras: CameraDevice[]): string => {
    console.log("üîç Selecionando melhor c√¢mera...");
    
    // Prioriza c√¢meras traseiras (especialmente importante no mobile)
    const rearCameras = cameras.filter(camera => {
      const label = camera.label.toLowerCase();
      return label.includes('back') ||
             label.includes('rear') ||
             label.includes('environment') ||
             label.includes('traseira') ||
             label.includes('tr√°s') ||
             label.includes('principal') ||
             label.includes('camera2 0') ||
             label.includes('facing back');
    });

    attemptRef.current += 1;
    
    let selectedDeviceId: string;
    if (attemptRef.current > 1 && cameras.length > 1) {
      const alternateIndex = (attemptRef.current - 1) % cameras.length;
      selectedDeviceId = cameras[alternateIndex].deviceId;
      console.log(`üîÑ Tentativa ${attemptRef.current}: Usando c√¢mera alternativa:`, cameras[alternateIndex].label);
    } else if (rearCameras.length > 0) {
      selectedDeviceId = rearCameras[0].deviceId;
      console.log("üì∑ Selecionando c√¢mera traseira:", rearCameras[0].label);
    } else {
      selectedDeviceId = cameras[0].deviceId;
      console.log("üì∑ Selecionando primeira c√¢mera dispon√≠vel:", cameras[0].label);
    }
    
    return selectedDeviceId;
  }, []);

  const initializeVideoStream = useCallback(async (deviceId: string, videoElement: HTMLVideoElement): Promise<void> => {
    try {
      console.log(`üé¨ Inicializando stream de v√≠deo para deviceId: ${deviceId}`);
      
      // Para stream existente se houver
      if (videoElement.srcObject) {
        console.log("üõë Parando stream existente...");
        const existingStream = videoElement.srcObject as MediaStream;
        existingStream.getTracks().forEach(track => {
          track.stop();
          console.log("üõë Track parada:", track.kind);
        });
        videoElement.srcObject = null;
      }

      // Configura√ß√µes otimizadas para m√∫ltiplas orienta√ß√µes
      const constraints = {
        video: {
          deviceId: { exact: deviceId },
          facingMode: "environment",
          // Permite resolu√ß√£o adapt√°vel para diferentes orienta√ß√µes
          width: { ideal: 1920, min: 480, max: 4096 },
          height: { ideal: 1080, min: 320, max: 2160 },
          frameRate: { ideal: 30, min: 10, max: 60 }
        },
        audio: false
      };
      
      console.log("üìã Solicitando getUserMedia com constraints:", constraints);
      
      // Retry logic para permiss√µes
      let stream: MediaStream;
      let retryCount = 0;
      const maxRetries = 3;
      
      while (retryCount < maxRetries) {
        try {
          stream = await navigator.mediaDevices.getUserMedia(constraints);
          break;
        } catch (error) {
          retryCount++;
          console.warn(`‚ö†Ô∏è Tentativa ${retryCount} falhou:`, error);
          
          if (retryCount === maxRetries) {
            throw error;
          }
          
          // Aguarda antes de tentar novamente
          await new Promise(resolve => setTimeout(resolve, 500 * retryCount));
        }
      }
      
      console.log("‚úÖ Stream obtida com sucesso");
      console.log("üìä Detalhes da stream:", {
        tracks: stream!.getTracks().length,
        videoTracks: stream!.getVideoTracks().length,
        active: stream!.active
      });
      
      if (stream!.getVideoTracks().length === 0) {
        throw new Error("Nenhuma track de v√≠deo encontrada na stream");
      }
      
      // Configura as tracks para melhor performance
      const videoTrack = stream!.getVideoTracks()[0];
      console.log("üìã Video track settings:", videoTrack.getSettings());
      
      // Anexa stream ao elemento de v√≠deo
      videoElement.srcObject = stream!;
      console.log("üì∫ Stream anexada ao elemento de v√≠deo");
      
      // Aguarda o v√≠deo estar pronto com timeout mais generoso
      return new Promise((resolve, reject) => {
        const timeoutId = setTimeout(() => {
          reject(new Error("Timeout ao carregar v√≠deo - verifique permiss√µes"));
        }, 20000); // Aumenta timeout para 20 segundos
        
        const onLoadedData = () => {
          clearTimeout(timeoutId);
          console.log("‚úÖ V√≠deo carregado e pronto");
          console.log("üìê Dimens√µes do v√≠deo:", {
            videoWidth: videoElement.videoWidth,
            videoHeight: videoElement.videoHeight
          });
          videoElement.removeEventListener('loadeddata', onLoadedData);
          videoElement.removeEventListener('error', onError);
          resolve();
        };
        
        const onError = (error: Event) => {
          clearTimeout(timeoutId);
          console.error("‚ùå Erro no elemento de v√≠deo:", error);
          videoElement.removeEventListener('loadeddata', onLoadedData);
          videoElement.removeEventListener('error', onError);
          reject(new Error("Erro ao carregar v√≠deo - problema de compatibilidade"));
        };
        
        videoElement.addEventListener('loadeddata', onLoadedData);
        videoElement.addEventListener('error', onError);
        
        // Configura propriedades do v√≠deo para melhor suporte mobile
        videoElement.setAttribute('playsinline', 'true');
        videoElement.setAttribute('webkit-playsinline', 'true');
        videoElement.setAttribute('x5-playsinline', 'true'); // Para browsers chineses
        videoElement.muted = true;
        videoElement.autoplay = true;
        
        // For√ßa play de forma mais robusta
        const playPromise = videoElement.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              console.log("‚úÖ V√≠deo iniciado automaticamente");
            })
            .catch(e => {
              console.warn("‚ö†Ô∏è N√£o foi poss√≠vel reproduzir automaticamente:", e);
              // Tenta for√ßar o play novamente ap√≥s um delay
              setTimeout(() => {
                videoElement.play().catch(console.warn);
              }, 1000);
            });
        }
      });
      
    } catch (error) {
      console.error("‚ùå Erro ao inicializar stream de v√≠deo:", error);
      
      // Tratamento espec√≠fico para erros comuns
      if (error instanceof Error) {
        if (error.name === 'NotAllowedError') {
          throw new Error("Permiss√£o da c√¢mera negada. Habilite o acesso √† c√¢mera nas configura√ß√µes do navegador.");
        } else if (error.name === 'NotFoundError') {
          throw new Error("Nenhuma c√¢mera encontrada. Verifique se o dispositivo possui c√¢mera.");
        } else if (error.name === 'NotReadableError') {
          throw new Error("C√¢mera em uso por outro aplicativo. Feche outros apps que usam a c√¢mera.");
        } else if (error.name === 'OverconstrainedError') {
          throw new Error("Configura√ß√µes de c√¢mera n√£o suportadas pelo dispositivo.");
        } else if (error.name === 'AbortError') {
          throw new Error("Opera√ß√£o cancelada. Tente novamente.");
        }
      }
      
      throw error;
    }
  }, []);

  return {
    getAvailableCameras,
    selectBestCamera,
    initializeVideoStream,
    attemptRef
  };
};
